#Sat May 21 16:26:14 PDT 2011
cmdhistory=["1" ";; Loading file src/day/core.clj" "(unless true (/ 1 0))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(unless true (println \\"haha\!\\"))" "(unless false (println \\"haha\!\\"))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(unless-amit true (println \\"haha\!\\"))" "(unless-amit false (println \\"haha\!\\"))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(unless-full\\n  false (println \\"haha\!\\"))" "(macroexpand-1 (unless-full\\n  false (println \\"haha\!\\")))" "(macroexpand-1 '(unless-amit\\n  false (println \\"haha\!\\")))" "(macroexpand-1 '(unless\\n  false (println \\"haha\!\\")))" "(macroexpand '(unless\\n  false (println \\"haha\!\\")))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(unless-do false (println \\"Ha\!\\") (println \\"More\!\\"))" "apply" "(source apply)" "do" "(defmacro foo [ & f]\\n  `(let [a (inc 1)]\\n     (println f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a\# (inc 1)]\\n     (println f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a\# (inc 1)]\\n     (println ~f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a\# (inc 1)]\\n     (println ~@f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a\# (inc 1)]\\n     (println (symbol a\#) ~@f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a\# (inc 1)]\\n     (println 'a\# ~@f)))" "(foo 2 3 4)" "(defmacro foo [ & f]\\n  `(let [a (inc 1)]\\n     (println ~@f)))" "(foo 2 3 4)" "(macroexpand-1 '(foo 2 3 4))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(foo 2 3 4)" ";; Switching to day.core namespace" "(my-declare a b c)" ";; Switching to day.core namespace" "(my-declare a b c)" "(macroexpand-1 (my-declare a b c))" "(macroexpand (my-declare a b c))" "(macroexpand-1 (my-declare a b c))" "(macroexpand-1 '(my-declare a b c))" "(macroexpand-1 '(my-declare-2 a b c))" ";; Loading file src/day/core.clj" ";; Switching to day.core namespace" "(macroexpand-1 '(my-declare-1 a b c))" "(macroexpand-1 '(defmacro foo [a] nil))" "(defn f [x] x)" "(.setMacro (var f))" "(meta 'f)" "(meta '\#f)" "(meta \#'f)" "(macroexpand-1 '(and 1 2 3))" "(macroexpand-1 '(and 1 2 3 4))" "(macroexpand '(and 1 2 3 4))" "(clojure.walk/macroexpand-all '(and 1 2 3 4))" "(var and)" ";; Switching to day.core namespace" "(infix 2 * 7)" "(macroexpand '(clojure.test/is (\= 1 2)))" "(def _|_ nil)" "_|_" "(clojure.walk/walk identity identity '(let [a 1] (inc a)))" "(symbol? 'a)" "(symbol? 1)" "(defn adorn [x] (if (symbol? x) (str \\"_\\" (name x)) x))" "(clojure.walk/walk adorn identity '(let [a 1] (inc a)))" "(defn adorn [x] (if (symbol? x) (symbol (str \\"_\\" (name x))) x))" "(clojure.walk/walk adorn identity '(let [a 1] (inc a)))" "(defn adorn [x] (if (var? x) (symbol (str \\"_\\" (name x))) x))" "(clojure.walk/walk adorn identity '(let [a 1] (inc a)))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" ";; Loading file src/day/advanced.clj" "let" "(macroexpand-1 '(let [a 1] (inc a)))" "let*" "(my-let [[x y] '(2 3)] (* x y))" "(defn foo [a b] (+ a b))" "(foo 1 2 )" "(foo 1 2 3)" "(extend-fn foo [x y z] (* x y z))" "1" ";; Switching to day.advanced namespace" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" "(macroexpand-1 (extend-fn foo [d e f] (* d e f)))" "(macroexpand-1 '(extend-fn foo [d e f] (* d e f)))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(macroexpand-1 '(extend-fn foo [d e f] (* d e f)))" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(macroexpand-1 '(extend-fn foo [d e f] (* d e f)))" "(extend-fn foo [d e f] (* d e f))" ";; Loading file src/day/advanced.clj" ";; Switching to day.advanced namespace" "(extend-fn foo [d e f] (* d e f))" "(macroexpand-1 '(extend-fn foo [d e f] (* d e f)))" "(foo 1 2)" "(foo 1 2 3)" "(pprint \\n  (macroexpand-1 '(extend-fn foo [d e f] (* d e f))))" "pprint" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(anaphoric-if (some-computation 11)\\n              (* 2 it))" "(anaphoric-if (some-computation 12)\\n              (* 2 it))" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(anaphoric-if (some-computation 12)\\n              (* 2 it))" "(anaphoric-if (some-computation 11)\\n              (* 2 it))" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(anaphoric-if (some-computation 11)\\n              (* 2 it))" "(anaphoric-if (some-computation 11)\\n              (println \\"it \=\\" it)\\n              (* 2 it))" "(anaphoric-if (some-computation 12)\\n              (println \\"it \=\\" it)\\n              (* 2 it))" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(anaphoric-if (some-computation 12)\\n              (println \\"it \=\\" it)\\n              (* 2 it))" "(anaphoric-if (some-computation 11)\\n              (println \\"it \=\\" it)\\n              (* 2 it))" "(anaphoric-if (some-computation 11)\\n              (println \\"it \=\\" it)\\n              (map (partial * it) [1 2 3 4]))" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(anaphoric-and 2 (* 3 it) (+ 1 it))" "(def m { \:cust { \:addr { \:name { \:first \\"Sean\\" \:last \\"Corfield\\"}}}})" "(anaphoric-and m (\:cust it) (\:addr it) (\:name it) (\:last it))" ";; Loading file src/day/anaphora.clj" "(with-it (and m (\:cust it)))" "(with-it\\n  (if (even? 1) false (inc 1)))" ";; Loading file src/day/anaphora.clj" ";; Switching to day.anaphora namespace" "(thread-it 2 (* it 3) (+ 1 it))" "(thread-it 2 (* it 3) (+ it it))" "(thread-it 2 (* it 3) (+ it it) it)" "(thread-it 2 (* it 3) (+ it it) (inc it))" "(if 2 (* it 3))" ";; Switching to day.anaphora namespace" "(if 2 (* it 3))" "(a-if 2 (* it 3))" "(thread-it 2 (* it 3) (+ it it) (inc it))" "(thread-it (* 10 20) (inc it) (- it 8))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" "(var bindind)" "(var binding)" "(apply binding '([x 1] (inc x)))" ";; Loading file src/day/macmac.clj" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(make-synonym b binding)" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(t 1 2 3))" "(macroexpand-1 '(t 1))" "(macroexpand-1 '(t [1 2]))" "splice" "unsplice" "~" "`()" "(find-doc \\"back-quote\\")" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(macroexpand-1 '(make-synonym  b binding))" "(make-synonym b binding)" "(b [x 10] (inc x))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(make-synonym b binding)" "(b [x 10] (inc x))" "(make-synonym c binding)" "(c [x 10] (inc x))" "(binding [x 10] (inc x))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(binding [x 10] (inc x))" "binding" "(macroexpand-1 '(binding [x 10] (inc x)))" "(declare x\\n         )" "(binding [x 10] (inc x))" ";; Loading file src/day/macmac.clj" ";; Switching to day.macmac namespace" "(make-synonym a binding)" "(a [x 11] (inc x))" "(def ^\:dynamic *foo* 1)" "*foo*" "(meta (var *foo*))" "(doc condp)" ";; Loading file src/day/clos.clj" ";; Switching to day.clos namespace" ";; Loading file src/day/clos.clj" "(method-spec ['foo '[a b c] '(code)])" "(def body '( (extends base) (method foo [a b c] (code))))" ";; Loading file src/day/clos.clj" "(siva \:make-sound)"]
eclipse.preferences.version=1
